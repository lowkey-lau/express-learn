#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require("../app");
var debug = require("debug")("express-learn:server");
var http = require("http");
const { Server } = require("socket.io");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || "3000");
app.set("port", port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
const io = new Server(server, {
  connectionStateRecovery: {},

  cors: {
    origin: true,
    credentials: true,
  },
});
var all_socket = {};
io.on("connection", (socket) => {
  let unique_id = new Date().getTime();
  console.log(unique_id);

  socket.unique_id = unique_id;

  socket.on("login", (msg) => {
    socket.account = msg.account;
    all_socket[socket.account] = all_socket[socket.account] ? all_socket[socket.account] : {};
    all_socket[socket.account][socket.unique_id] = socket;
  });

  socket.on("disconnect", (msg) => {
    try {
      delete all_socket[socket.account][socket.unique_id];
    } catch (error) {}
  });

  socket.on("error", (msg) => {
    try {
      delete all_socket[socket.account][socket.unique_id];
    } catch (error) {}
  });

  socket.on("send_message", (msg) => {
    let to_account = msg.to_account;
    if (all_socket[to_account]) {
      for (let i in all_socket[to_account]) {
        try {
          all_socket[to_account][i].emit("send_message", msg.data);
        } catch (error) {}
      }
      for (let i in all_socket[socket.account]) {
        try {
          all_socket[socket.account][i].emit("send_message", msg.data);
        } catch (error) {}
      }
    }
  });
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
